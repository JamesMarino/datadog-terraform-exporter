package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_monitor_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x79\x8a\x51\xce\xbb\x3c\x41\x39\xac\x5a\x56\xe5\xb0\xa0\xad\x90\x7a\x58\xad\x2c\x2b\x19\x88\x55\x63\x53\xc7\x21\x42\x5e\xbf\xfb\xca\xff\x20\x4e\x4d\xcb\x29\xfe\xbe\x6f\x7e\x99\x4c\x26\x28\xec\xe5\xa0\x1a\x84\xba\xa5\x9a\xb6\xf2\x40\x8e\x52\x30\x2d\x55\x0d\xb5\x31\xb0\x58\xb7\x60\x6d\x0d\xa6\x02\x10\xf4\x88\x90\xff\x96\x21\xb4\x71\x8e\xb5\x75\x05\xa0\x2f\xa7\x3b\xa1\x9d\x73\x42\xc8\x98\xef\xc0\xf6\xb0\xd8\xd1\x43\x0f\xd6\xba\x32\x77\x35\x2f\xfb\x63\x8c\xa2\xe2\x80\x21\x68\x6d\x6d\xcc\xc2\xda\xfa\x9b\x31\x28\x5a\x6b\xff\x46\x12\x8a\x36\x40\x8e\xd8\xf7\xf4\x80\x39\xe4\xe1\x61\xb5\xdd\x55\xae\x81\x5f\xd1\xb6\xb6\x72\x12\x00\xf6\x0d\xe5\x54\x33\x29\x48\x2a\x9d\xe6\xb7\x27\x67\xf5\x8b\xd5\x35\x36\x23\x54\x00\xef\x03\xaa\x0b\x2c\xc1\xe5\x7f\xfb\xeb\x7f\x1e\x7b\xc2\xc7\x8e\x2a\xda\x68\x54\xfe\x09\x63\xab\x23\xd3\xdd\x15\x1c\x9a\x4e\xb3\xd8\x48\xcd\xf6\x97\x8d\x7c\xa2\x9a\x06\x47\x78\x85\x08\x49\xdc\xab\x09\x4f\xe3\xa7\xfd\x21\x99\x4d\x21\x01\x5f\x30\x00\xd6\x42\xa3\x3a\x53\x1e\x5c\x15\x55\xc2\x92\x1c\xa0\xe5\x74\x11\x1c\xee\xff\x63\x68\x99\xce\x1a\xa5\x5e\x99\xf6\x38\xc9\x14\x49\x3b\x76\x44\x39\xe8\xe7\xb8\x03\xe1\x44\xba\xc8\xc8\xdd\x22\x60\x2d\x1a\x3e\xb4\x78\xdb\x23\x16\x04\xe2\xf7\x29\x60\xa6\x99\x4f\xc7\xf5\x3e\x30\x85\x3f\x07\xce\x5f\x99\x68\xe5\x98\xe6\xe5\x65\xb2\x1f\x38\x27\x63\x30\xd2\xc4\x8a\x05\xe5\x91\xe1\xf8\x2c\x7b\xfd\x84\x9c\x5e\xe2\xcc\x70\x24\x9d\xec\x35\x69\xbd\x16\xa7\xf6\x21\x56\xa4\xad\xce\x94\x0f\x7e\x21\x27\x49\xbc\x8a\x19\xb2\x98\x9d\x50\xa7\x6f\xa3\x53\xd8\x77\x92\xb7\x93\xcd\x0c\x0b\x3b\x77\xf4\xed\xbc\xf4\x7f\x0d\x37\xc8\xf6\x2d\x44\x00\xe4\x5b\x6c\xe1\x26\x65\x4f\x73\xab\x79\xa5\x4a\x30\x71\x48\xf2\x18\x8f\xa1\x7a\x66\x7e\x8e\x78\xc1\x46\x9e\xdd\x57\x98\xa3\x88\x4a\x7a\xc6\x9c\xa7\xef\xb0\x1f\x15\xd3\xac\x49\x9f\x04\x40\x93\xce\x01\x36\xb7\xbf\xa0\xcc\x6f\x9a\x68\xf3\x1e\xef\xe5\x33\x7c\x71\x45\x4a\x87\xca\x56\xff\x03\x00\x00\xff\xff\x8b\xf6\x0d\xaa\xea\x05\x00\x00")

func templates_monitor_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_monitor_tmpl,
		"templates/monitor.tmpl",
	)
}

var _templates_screenboard_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xd9\x52\xe4\x3a\x12\x7d\xe7\x2b\x14\xf5\x3c\x4d\x7f\x01\x0f\x34\xf4\x42\x04\x4c\x33\x14\x4d\xcf\x12\x13\x0e\x61\x67\xb9\x14\xd8\x56\xb5\x24\x17\x14\x35\xfe\xf7\x09\xed\x29\x97\xb7\xbe\x71\x2f\x2f\x94\xce\x49\x9d\xd4\x92\x4e\x6d\x02\x24\x6f\x45\x0e\x64\x55\x50\x45\x0b\x5e\x66\x32\x17\x00\xcd\x33\xa7\xa2\x58\x91\xd5\xf1\x48\xce\x6f\x0a\xd2\x75\x2b\x72\x3c\x23\x44\x31\x55\x01\xb9\xb0\xf8\xa3\x29\x74\xdd\xea\x8c\x90\xe3\xf1\x03\x61\x1b\x72\xfe\x00\xb4\xf8\xde\x54\x07\xd2\x75\x67\x84\x08\xa0\x45\xc6\x75\xf1\x82\xe8\x1a\x29\xab\xeb\x40\x53\xc4\x82\x16\x58\x6f\xa9\x00\x87\x49\xfb\xdb\xd6\xc5\xc4\x60\xcd\x47\xa8\x77\x15\x55\xf0\x44\x05\xa3\xcf\x15\xc8\x48\xbf\x32\xb5\x9d\x34\x10\xb4\x29\x81\x9c\x5b\x40\x39\xbb\x6c\xef\x0c\x4d\xd7\x09\x69\x68\x0d\xfa\xbf\xeb\xfe\xdf\x75\xd1\xf6\x9e\x90\x9d\x80\x0d\x7b\x0b\xdc\xbd\x2d\x7a\xb6\x80\x0d\x6d\x2b\xe5\xd9\x6b\x57\xd4\xa3\x7a\x46\xc8\x60\x8f\x86\x0a\x49\x6f\x7e\xb2\xa2\x04\x35\xd6\x87\x57\xc3\xba\x86\xab\xc3\x2e\x4e\x9a\xfe\xed\xdb\xf5\xe6\xd1\x7f\x06\xe8\xe0\xa1\x7f\x05\x28\x0c\xb0\x9b\x6f\xab\x79\x12\x09\x8f\xf0\xa6\x92\x3a\xa1\x0b\x3d\x89\xcb\x8a\x95\x4d\xa2\x93\x51\x03\x61\x35\x6f\x34\x2f\xb7\x66\xef\x69\xab\x32\xa9\x11\x2c\xe6\x4c\x26\xb5\xbe\x01\x2b\xb7\xca\xa3\x5b\x5b\x72\x22\x81\x9b\x54\xf8\xc9\x0a\xb5\xf5\xe0\xab\x29\xb8\xfa\x9e\x99\xee\x8c\x1d\x3f\xdb\x0f\xfd\xdb\xf7\x60\xc1\xb8\x5e\xf1\x8a\x0b\x0f\xe6\xa6\xe0\x6a\x7b\x66\x66\x1c\x6b\xc0\x98\xfb\x5e\x10\xaa\xf4\x6f\x1b\x4d\x84\x54\x6c\x0f\x99\xdc\xd1\x30\x63\xb7\x6c\x0f\x6b\x5d\xf6\x7e\xba\x31\x6f\x83\xce\x2b\xb8\x86\xcd\x90\xff\x84\x50\xac\x82\xac\x80\x4d\x68\x86\x17\x78\x62\xef\xde\x86\x90\x3d\x7b\xf7\xad\xb2\xf8\x0a\x59\x23\xef\x68\xec\x5a\xa9\x78\xfd\xa3\x61\x2a\x72\xb9\xc1\xb2\x56\x83\x7e\x20\xb1\xd9\xac\xe8\x65\xab\xb8\xcc\x69\xfc\x5e\x08\xa1\x01\x72\x8a\xd8\x66\x56\x50\x47\x41\xf2\xe1\xd8\x20\xe9\x7d\x39\xc8\x68\x56\xf1\x01\x7e\xb5\x20\x7d\x06\x49\x87\x7e\x98\x4b\x32\x8c\xfe\x13\xd6\x2c\xcc\x48\x14\xff\x47\x0b\xe2\x10\x0d\x09\xf9\xe5\xdb\xe8\x99\x55\x52\x27\x69\x21\xea\xb5\xcd\x56\x01\x1f\xcd\x64\x33\x3a\xc6\x69\x5f\xec\x97\x06\x33\x2c\x89\xcd\x16\xe9\xde\x81\x12\x2c\xc7\x4c\x6d\x11\x27\x18\xf8\x65\xbd\x85\x37\xf5\x85\x55\x0a\x44\xd2\x67\x3d\xcd\x1b\x0b\xa3\x79\x0e\x86\x8b\xa4\x6f\x59\x8d\xe3\x5b\x7f\xc3\x75\x8c\x6d\xcf\x2e\x92\xba\x2c\x4b\x01\x25\x55\x3c\x69\x25\x8d\xa8\x0f\x6f\x6c\xb7\x48\xf9\x8a\xd7\x3b\x2a\xe0\x91\x63\x32\xb7\x60\xa6\x78\x4c\x69\xd1\x6c\x99\xee\x56\x07\x6e\x7f\xfa\x73\x83\x26\xf3\x9f\x18\x2e\x92\xfe\x2e\x0a\x10\x9f\x92\x48\xe7\x1a\xca\x9e\xc3\x42\x1a\x4d\x96\x2b\x5e\x33\x71\x2a\x59\x30\x91\x68\x5a\xa3\x45\xa2\x9f\xdf\x94\xa0\x57\xbc\xc2\x1c\x68\x2c\xcb\x79\xe5\x45\x91\xd1\x22\xd1\x9b\x26\x17\x40\x25\x7c\xe5\x3c\xe1\x99\xc3\xb3\x52\x13\x4e\xbc\x67\xbc\x30\x1e\x9a\x82\x29\xc6\x1b\x5a\x7d\xe1\xa2\xa6\x38\x1f\xe1\x6c\x35\x60\xf7\xa1\x67\x78\x92\xba\x74\x60\x85\x5a\xd9\xc6\x54\x43\x79\x6c\x64\x69\xf5\x35\x47\x17\xd8\xd1\x3e\x45\xc1\x7b\x5a\x81\x52\x90\x92\x3b\x07\xfa\xfd\x63\xb0\x59\x2c\x6b\xbf\x8a\xfe\x67\xe9\xbf\x1f\xfc\x61\x26\x96\x8b\xf5\x6f\x9a\x3d\x08\x95\x72\xcc\x62\x61\x8a\x9d\xc5\x62\xcd\x27\x5a\xb5\xbd\x81\xd8\x1b\xc8\xaf\xe0\x8e\x5f\xde\xc8\x9a\x96\xf0\xe3\xe1\xb6\xd7\x4c\x8d\x66\xad\x08\x91\x8e\xcc\x66\xa4\xbb\x81\x38\x25\x73\xb1\x3b\x12\xce\x6b\x75\xa8\x60\x38\x82\x4f\x28\x69\x80\x8b\xc1\x88\xfc\x8b\x02\xa8\x9f\x1f\x67\x56\xdb\x19\xb5\x64\x33\x6c\xff\x26\xb6\xc4\xe3\xe3\x4f\x3e\x7e\x34\x63\xf1\x07\xc7\xfc\x91\x96\x76\xa1\x4c\x52\x87\xa2\xa5\x5b\x51\x25\xb9\x20\xff\x39\x1e\x5d\x7a\x88\xd6\x5d\xb7\x3a\x1e\xcf\xbb\x6e\xf5\xb7\xe3\x11\x9a\xa2\xeb\xfe\x3b\xee\x4d\xb7\xd1\xed\x84\xa6\xf6\x5c\xf3\x80\xc9\xd4\x7b\x68\x92\xfc\x15\x83\x64\x90\x3a\x49\x6c\xa0\xad\x50\xdc\x8c\x6e\xbc\x74\xb3\x8d\x71\xaf\x49\x1f\x4e\x1a\x39\x8c\xf4\x1a\x7e\x47\xc5\x4b\x32\xcc\xb1\xe1\x83\xd4\x49\xc3\x6b\x63\x35\xb0\x97\xfc\xb3\x36\x81\xb7\xf4\x19\x92\x15\xb0\x32\x80\xdf\x03\x39\x76\x91\xd4\x49\xe2\x9a\x49\x5b\x83\x31\x33\x34\xf8\x8b\x23\x46\x0b\xf8\x13\xd1\xd9\x00\x3f\x71\xc8\x4c\x0e\xcc\x7a\x73\x99\x9c\x97\xa3\xc1\xe4\x91\x11\x9f\x97\xf0\x31\x29\x39\x20\x8d\xd4\xbd\x17\x90\x33\xc9\x78\x38\xcb\xec\x02\x10\xef\x4f\x82\xc5\xec\xa1\x39\xbd\x4f\x58\x70\x28\x1a\xd1\xfa\xc2\x9b\x64\x6c\x36\xbc\x49\xc7\x06\x19\x4c\x0a\x5d\x56\x20\xd4\xcd\xb5\x87\xa9\x2e\x66\x2c\x6c\x85\x22\x3d\xad\xd2\x2a\xfe\x00\x1b\x01\x32\xe4\x51\x7d\x84\xcc\x84\xc3\xd0\x29\x32\x9a\x4d\x2a\xde\x42\x89\xd0\xca\x96\x7c\xf8\x7b\x6e\x81\x02\x1e\x24\xab\x92\x0c\x53\x62\x34\x29\x97\x9c\x12\xcd\x71\x6c\x38\x59\x8d\xc5\x60\x5c\xe8\xd1\xe2\x8e\xd7\xf5\xb1\xeb\x92\x2d\xe4\x2f\xe1\xba\xc4\x14\xc2\x09\xc0\x32\x93\xd5\xbf\x0a\xde\xee\x58\x53\x7a\xbc\xf4\x65\x27\x82\xf8\x79\x9d\x44\x24\x51\x98\xbf\xb5\xc9\x5f\xee\xb9\x8c\xf7\x23\xf9\x4b\xb6\xe3\x32\xde\x7c\x79\x7a\x56\xe5\x73\x51\x42\x22\x03\x1a\x40\x3a\xce\x60\xfa\x02\xed\xf1\x2e\x4c\xc7\x56\xd5\x61\x3e\x1c\x3e\xdb\x08\xdc\x00\xec\x7b\xae\xee\xa7\x32\xc7\x5b\xf4\xe7\x32\xd9\x9e\x47\x76\x52\xc4\xac\xad\x38\xae\x4d\x72\x4e\xc2\x1a\x9b\x4c\x6a\xad\xd9\x3b\x0a\x0e\x69\x4b\x4e\x24\x70\x93\x0a\x77\x54\x94\x2c\xa4\xb4\xda\x96\xfc\x95\x82\xe7\xa6\xfb\xd3\xec\x43\x4f\x9a\x7d\xe8\x82\x41\xa7\x1b\x0f\x62\xcf\x72\x70\xff\x42\x27\x6c\x31\x73\xff\x43\x6f\xfa\xc6\x4b\xa4\xdd\xbd\x79\xa2\x6b\xae\xd6\x53\xd1\xe4\x7a\x7d\x7c\xa4\xe1\x09\x04\x5e\x4a\xf4\x8c\x65\x7b\x87\xc5\x41\x47\x66\xd3\x09\x8e\x1e\x78\xab\x7a\x9a\x95\x01\xfb\xaa\x7d\xd3\xe9\x19\x6d\xa5\x5a\x6f\xf9\xeb\x37\x16\x0f\xb1\x75\x2b\x55\x26\xb7\xfc\x35\xdb\x6a\xd4\xcf\x6f\x6a\xb9\x48\xf5\xb3\x10\x5c\x0c\xe8\x82\xc5\x7b\xca\xc1\x7a\x91\xf6\x2d\x55\xd0\xe4\x87\x53\xf1\xca\x11\x3d\xf5\x68\xbf\x48\xfe\x93\x00\xfa\x52\xf0\xd7\xe6\xd4\xc1\x73\xa0\x7a\x2e\x70\x9d\x45\x4e\xae\x99\x54\x82\x3d\xb7\x0a\x4d\x6a\xf4\x53\x60\xb6\xe7\xaa\x57\x73\x91\xb7\x07\xf7\xa6\x76\xcb\xa4\x3a\xf5\xe6\x5f\xdc\xb2\x4a\xd3\x3d\x77\xbd\xaa\x93\xee\xae\x99\xdc\x55\xf4\x60\x6f\x3c\x3c\x59\x58\xd0\x5f\x68\xf8\x07\xa7\x9e\xe9\xfc\x5b\xc2\xbd\x80\x0d\x08\x68\x62\x0a\x30\x69\x34\xdb\x45\x1c\xdf\x7f\x24\xe6\xd3\xab\x04\x2b\xe0\xdf\x20\xf8\x15\x6f\x9b\xf8\x29\x6c\x59\x01\xd9\x3b\x08\x9e\xe5\x16\xf7\x6b\x47\xdf\x7a\x26\x6d\x36\xb4\x84\xb5\xa2\xaa\x95\x7a\x34\x93\x07\xab\xda\x90\x99\x34\xac\x9d\x8a\xe4\x0d\x6b\xac\xf2\x62\x8f\xf8\x11\x6c\xc0\xa3\x7d\x9a\xc2\x0f\x3b\x63\x95\x7f\xcf\x23\x5e\xb4\x86\x3c\xe2\x25\x6c\xac\xf2\xef\x79\x4c\xf6\xdb\x43\x2e\x93\xed\xf7\x68\xf5\xe9\x23\x02\x15\xb4\x96\x18\xb5\x47\xc9\x14\xdf\xd9\x52\xff\x41\x68\xcd\xf1\x45\x95\xe4\xf1\x8a\xca\x31\x8b\x5e\x5b\x22\x3a\xfa\x1a\x37\xa1\x60\x22\x36\xc2\x26\xac\xe3\x27\x63\xb9\x59\x91\xb5\xa2\x49\x4f\x4c\xd1\x77\xc5\x71\x23\x22\xa3\xa7\xc0\xe1\x2f\xbe\xad\x1b\x89\xbe\x74\x53\xb4\xef\xee\x9e\xfc\x1f\x01\x99\xd3\x1d\x5c\x6d\xa9\xa0\x39\xbe\x51\x19\x5b\x4a\x79\x29\x21\xb4\xbe\xb2\x25\xbf\x76\x7a\x6e\x20\x08\xf4\xc9\xd6\x3e\x5f\x4f\x3c\x85\x77\x67\xff\x0f\x00\x00\xff\xff\x37\x4d\x94\x8d\xba\x20\x00\x00")

func templates_screenboard_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_screenboard_tmpl,
		"templates/screenboard.tmpl",
	)
}

var _templates_timeboard_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xc9\x6e\xdb\x3c\x10\xbe\xfb\x29\x06\x42\x0e\xff\x0f\xc4\x7e\x80\x02\x3e\xa4\x09\x1c\x14\xe8\x92\x26\x41\x7a\x28\x0a\x81\x96\x46\x0a\x51\x6a\x09\x45\x25\x71\x08\xbe\x7b\xc1\xe1\x26\xdb\x8a\x7b\xa8\x4f\x9c\x6f\xbe\x59\x39\x43\x4b\xe2\xd0\x8d\xb2\x40\xc8\x4a\xa6\x58\xd9\xd5\xb9\xe2\x0d\x6e\x3b\x26\xcb\x0c\x32\xad\x61\xf5\xa9\x04\x63\x32\xd0\x0b\x00\xc5\x95\x40\x70\xbf\xb5\xd3\xde\x13\x64\x4c\xb6\x00\x28\x71\x28\x24\xef\x15\xef\xda\xa0\xbe\x9a\x40\x8e\x24\x91\x95\x79\xd7\x8a\x1d\xf9\xb0\x9c\x5b\x64\xe5\x37\x0b\x2c\x8d\x59\x00\x68\xfd\xc2\xd5\x23\xac\xae\x25\xeb\x1f\x87\x08\x4a\xd6\xd6\x08\x2b\x20\xb1\xb6\x3a\x4a\x29\x24\x35\x93\x4e\x72\x75\x85\x15\x6f\x39\x25\xe1\xdc\x01\x3c\xf3\xb7\x54\xc4\x03\x7f\xb3\x8a\x60\xb4\x04\x5e\xc1\xea\x62\x54\xdd\x50\x30\x81\x56\xc5\xa2\xe0\x4d\x92\xd6\x98\xcc\x9a\x60\x5b\x7a\xd7\xc1\xc1\x8d\xc4\x82\x0f\x3e\x68\x1f\x05\xef\x20\x69\xdf\x75\x70\x2d\xbb\xb1\xa7\x0e\xd4\xf6\x04\x6b\xf8\xa9\xf5\x59\xed\xd0\x0f\xeb\x40\x30\x26\x74\xe7\x8c\xb7\x25\xbe\x9e\xc3\x19\x0a\x6c\x0e\x18\xbc\xf2\x6a\x63\xce\xb5\xa6\x60\x99\xd6\xc4\xa4\x13\x21\xbf\xe6\x13\xb9\x2b\xba\x1e\x29\x91\xc1\x9e\x7c\x22\x83\x43\x6d\x18\x47\x38\x95\x48\x62\xfc\x53\x22\x6a\xe7\xee\x83\xd0\x81\x24\x37\x05\x00\x3d\x13\xa8\x14\xee\x4d\x27\xf1\x57\x37\x5e\x13\x6e\x38\x72\xf3\x4a\xf0\x7e\x96\xbb\xb1\x8a\xc0\x37\xf3\xc9\x7c\x61\xf2\x37\x4a\x6a\x8b\x85\xdc\xa8\xed\x81\x7e\x66\xbd\x5d\x43\xaa\x98\xaf\xda\xf5\x98\xd6\xc8\x0a\x29\xbf\x67\x26\xc6\x38\x6a\x0f\x24\x24\xa5\xd6\x14\xfe\x33\xdb\xa2\xb0\x71\x04\x1d\x3c\xd9\xa1\x47\x23\x95\x4a\x38\x3e\xc4\xa2\x5c\x05\xb7\xf8\x34\xe2\xa0\x66\x4b\x90\x4e\x17\x6b\x78\x9a\xf4\xfa\xfb\x88\x72\x97\xd6\x28\xe6\x49\xa5\x2d\x8d\xa1\x7a\x0f\xca\xd5\xda\xa6\x00\xde\x7b\x34\xb9\xa8\x6b\x89\x35\x53\x9d\x74\x49\x58\xb0\x45\xc8\x32\xf8\xef\x0a\x6f\xb1\xba\x53\x92\xb7\xf5\x94\xf7\x3f\x2d\x69\x32\x0b\x5b\x9a\x90\x18\x8d\x1c\xda\xa8\xcb\xc3\xb0\x71\xba\xb4\xf6\xbd\x70\x48\xe4\xb9\x81\x5b\xc7\xf2\xad\x25\x6d\xba\x1f\x30\xbb\xe7\xfe\x18\xb6\x3c\x8d\xde\x7e\xbf\x93\xf1\x0f\x5e\xaa\x47\x6b\xfa\x42\x07\x6f\xe8\xd0\x13\x66\xa7\xdb\xba\x6f\x33\xa9\xd3\x17\x1e\x5a\x11\x15\x6e\xa4\x2f\xbb\xb6\xa4\x77\x92\x89\x4d\x27\x1b\xa6\x06\x98\x0e\xf7\xbb\xea\xf0\x38\xa7\x96\x16\x89\x9a\x57\xc4\xdd\xeb\x1a\x4c\xdb\x76\xba\x6b\xfb\x13\x62\x3d\x37\x3d\x93\xd3\x5b\xbe\x4c\x48\x9a\xbe\x54\x54\xd8\x9f\xf9\xa5\x3a\x0e\x10\x9b\x31\x0e\xaa\x6b\x3e\xd6\x97\x9d\x20\xcf\x05\xc9\xf9\xb6\xce\x0b\x42\x42\xf4\x03\xda\x5f\x3d\x6e\x0e\x3d\x56\xb3\x1e\x37\xef\x7b\x9c\x5e\x9b\x53\xcc\x9d\x16\x89\x7a\xbc\xeb\xf3\x92\xf1\xcf\xef\x14\x4b\xd7\x7f\x8f\x4d\x2f\x98\xc2\x07\x26\x39\xdb\x0a\x8c\x4f\xdf\xe4\xbf\xd9\x7e\x25\x78\x5a\xfe\xec\x79\xfe\xe6\x5b\xd6\xe0\xe4\xbd\xf8\x6a\xc5\x70\x5f\xbd\xc4\x8a\xbf\xc2\xe4\xcf\xd1\x8a\x41\x5b\x62\xc5\x46\xa1\xd2\x47\x85\x13\xed\x67\xc9\x6c\xd2\x66\xf1\x27\x00\x00\xff\xff\x3a\x64\x17\xd4\xd7\x08\x00\x00")

func templates_timeboard_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_timeboard_tmpl,
		"templates/timeboard.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/monitor.tmpl": templates_monitor_tmpl,
	"templates/screenboard.tmpl": templates_screenboard_tmpl,
	"templates/timeboard.tmpl": templates_timeboard_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"monitor.tmpl": &_bintree_t{templates_monitor_tmpl, map[string]*_bintree_t{
		}},
		"screenboard.tmpl": &_bintree_t{templates_screenboard_tmpl, map[string]*_bintree_t{
		}},
		"timeboard.tmpl": &_bintree_t{templates_timeboard_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
